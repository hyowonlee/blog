server:
  port: 8080
  servlet:
    context-path: /
    encoding:
      charset: UTF-8
      enabled: true
      force: true

spring:
  mvc:
    view: #컨트롤러가 리턴시 접두 접미에 이 내용들을 붙여서 리턴
      prefix: /WEB-INF/views/ #스프링 부트는 jsp를 템플릿엔진으로 기본적으로 지원하지 않아서 jsp를 넣을 디렉토리를 직접 만들고 연결해야됨 (스프링에선 이 경로 자동으로 만듬)
      suffix: .jsp # jsp파일을 찾아줄 거니 접미사에 .jsp

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?serverTimezone=Asia/Seoul
    username: blog
    password: blog

  jpa:
    open-in-view: true
    hibernate:
      ddl-auto: create # update, none, create등이 들어갈 수 있으며 create는 실행할때마다 테이블을 새로 만들겠다는 의미(write의 의미 update가 append임)
      #그래서 한번 실행되고는 update로 바꿔줘야 테이블 데이터가 안날라감
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl #entity를 만들때 (@ENTITY되어있는걸 테이블로 만들때) 변수명 그대로 DB에 필드를 만들어준다는 의미 (naming.뒤를 바꿔주면 다른 이름만들기 전략도 가능)
      use-new-id-generator-mappings: false    #연결된 db(mysql)의 기본인 autoincrement, 오라클로 말하면 시퀀스를 어떤방식으로 사용할건지, false로 하면 jpa가 사용하는 기본 넘버링 전략을 따르지 않음 true는 jpa의 기본을 따름
      #이렇게 false 해놓고 @GeneratedValue에서 IDENTITIY로 db의 전략을 따라가게 해놓아서 mysql의 기본인 autoincrement를 따라감
    #show-sql: true #이게 true이면 콘솔창에 sql문이 동작하는게 보임
    properties:
      hibernate.format_sql: true # 원래 show-sql은 한줄로 sql이 보이게되는데 이쁘게 들여쓰기 해줌



  jackson:
    serialization:
      fail-on-empty-beans: false
